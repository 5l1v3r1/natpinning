var gProtocols=["FTP","IRC","SIP","H225"];
var gCmdURL=getProtoFromURL() + "://" + getHostAndPortFromURL()+"/cli";
var gClientId="";
var gTests=[];
var gMyIP="";


//FIX FOR OLD IE VERSIONS
//from:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Compatibility

if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement, fromIndex) {
      if ( this === undefined || this === null ) {
        throw new TypeError( '"this" is null or not defined' );
      }

      var length = this.length >>> 0; // Hack to convert object.length to a UInt32

      fromIndex = +fromIndex || 0;

      if (Math.abs(fromIndex) === Infinity) {
        fromIndex = 0;
      }

      if (fromIndex < 0) {
        fromIndex += length;
        if (fromIndex < 0) {
          fromIndex = 0;
        }
      }

      for (;fromIndex < length; fromIndex++) {
        if (this[fromIndex] === searchElement) {
          return fromIndex;
        }
      }

      return -1;
    };
  }





function clTest(test_id,proto,ip,port){
	this.TEST_ID = test_id;
	this.PROTO = proto;
	this.PRIV_IP = ip;
	this.PRIV_PORT= port;
	this.STATUS = "NEW";
	this.RESULT="";
}



function isNumber(n) {
  		return !isNaN(parseFloat(n)) && isFinite(n);
}

function hideNextButton(el,boYesNo){
	if (boYesNo ==true){
		style="step_next_hidden";
	}else{
		style="step_next";
	}
	try{
		el.className = style;
		//el.style.display=style;
	}catch(err){
		//pass
	}
}
function hideMainFrame(el,boYesNo){
	if (boYesNo ==true){
		style="MainContainer_hidden";
	}else{
		style="MainContainer";
	}
	try{
		el.className = style;
		//el.style.display=style;
	}catch(err){
		//pass
	}
}

function otherIP(s){
	var parts = s.split(".")
	if (parts[3].toString !="1"){
		parts[3]="1";
	}else{
		parts[3]="2";
	}
	return parts[0]+"."+parts[1]+"."+parts[2]+"."+parts[3];
}
function isValidIp4(s){
	var parts = s.split(".");
	if (parts.length !=4){
		return false;					
	}
	for (var i = 0; i < parts.length; i++) {
		if (isNumber(parts[i])==false){
			return false;
		}else{
			var block = parseInt(parts[i]);
			if (block<0||block>255){
				return false;
			} 
		}
	}
	return true;
}
function isValidPort(s){
	var result=false;
	if (s.length>0){
		if (isNumber(s)==true){
			if (s>0 && s<65536){
				result=true;
			} 
		}
	}
	return result;
}

function createSwfObject(src, attributes, parameters) {
  	var i, html, div, obj, attr = attributes || {}, param = parameters || {};
  	attr.type = 'application/x-shockwave-flash';
  	if (window.ActiveXObject) {
    		attr.classid = 'clsid:d27cdb6e-ae6d-11cf-96b8-444553540000';
    		param.movie = src;
  	}else {
	    	attr.data = src;
	 }

	html = '<object';
	for (i in attr) {
	   	html += ' ' + i + '="' + attr[i] + '"';
	}
	html += '>';

	for (i in param) {
		html += '<param name="' + i + '" value="' + param[i] + '" />';
	}

	html += '</object>';
	div = document.createElement('div');
	div.innerHTML = html;
	obj = div.firstChild;
	div.removeChild(obj);
	return obj;
};

function getProtoFromURL(){
//Returns the protocol portion of the current URL
	var url = document.URL;
	var url_parts = document.URL.split("/");
	var result =url_parts[0];
	result = result.replace(":","");
	return result;
}

function getHostAndPortFromURL(){
//Returns the protocol portion of the current URL
	var url = document.URL;
	var url_parts = document.URL.split("/");
	return url_parts[2];
}

function httpreq(url){
	var xmlhttp;
	if (window.XMLHttpRequest){ // works with IE7+, Chrome, Firefox, Safari
		xmlhttp=new XMLHttpRequest();
	}else{ // works with IE6, IE5
    		xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
	}
	xmlhttp.open('GET', url, false);  // `false` makes the request synchronous
	xmlhttp.send(null);
	if (xmlhttp.status === 200) {
 		return xmlhttp.responseText;
	}else{
		return "";
	}
}

function updateTest(gTest){
	if (gTest.STATUS!="DONE"){
		var ts = new Date().getTime();
		var test_result = httpreq(gCmdURL + "?cmd=status&testid=" + gTest.TEST_ID + "&ts=" + ts);
		if (test_result!="0" && test_result != "ERROR"){
			var test_result_parts = test_result.split(" ");
			gTest.STATUS= test_result_parts[0]
			gTest.RESULT= test_result_parts[1]
		}
	}
}
function addTest(proto,ip,port){
	/*creates new test on server
		and uses retruned test id to initiate new clTest object and append it to gTests array
	*/
	var ts = new Date().getTime();
	var testid = httpreq(gCmdURL + "?cmd=ADD&ci="+gClientId+"&proto="+proto+"&ip="+ip+"&port="+port+"&ts="+ts);
	var loTest = new clTest(testid,proto,ip,port);
	gTests.push(loTest);
}
